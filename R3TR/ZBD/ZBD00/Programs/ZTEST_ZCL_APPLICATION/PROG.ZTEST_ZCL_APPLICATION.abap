*&---------------------------------------------------------------------*
*& Report  ZTEST_ZCL_APPLICATION
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*

REPORT  ZTEST_ZCL_APPLICATION.


DATA
: GR_O__APPL          TYPE REF TO ZCL_BD00_APPLICATION
, GR_O__MODEL         TYPE REF TO ZCL_BD00_MODEL
, GR_O__TABLE         TYPE REF TO ZCL_BD00_APPL_TABLE
, GD_T__SUPPRESS_ZERO	TYPE ZBD0T_TY_T_KF
, GD_T__DIM_LIST      TYPE ZBD00_T_CH_KEY
, GD_S__DIM_LIST      TYPE ZBD00_S_CH_KEY
, LR_O__DEMO          TYPE REF TO ZCL_BD00_APPL_TABLE
, LT_RULES_FIELD      TYPE ZBD0T_TY_T_RULE_FIELD
, LS_RULES_FIELD      TYPE ZBD0T_TY_S_RULE_FIELD
, LS_RULES_MATH       TYPE ZBD0T_TY_S_RULE_MATH
, LS_OPERAND          TYPE ZBD0T_TY_S_MATH_OPERAND
, LD_S__ALIAS         TYPE ZBD00_S_ALIAS
, LD_T__ALIAS         TYPE ZBD00_T_ALIAS
, LD_T__SEL           TYPE UJ0_T_SEL
, LD_S__SEL           TYPE UJ0_S_SEL
.


CLEAR GD_S__DIM_LIST.
GD_S__DIM_LIST-DIMENSION = `ACCOUNT`.
GD_S__DIM_LIST-ORDERBY   = 1.
INSERT GD_S__DIM_LIST INTO TABLE GD_T__DIM_LIST.

CLEAR GD_S__DIM_LIST.
GD_S__DIM_LIST-DIMENSION = `ACCOUNT`.
GD_S__DIM_LIST-ATTRIBUTE = `ACCTYPE`.
GD_S__DIM_LIST-ORDERBY   = 1.
INSERT GD_S__DIM_LIST INTO TABLE GD_T__DIM_LIST.

CLEAR GD_S__DIM_LIST.
GD_S__DIM_LIST-DIMENSION = `HRACCOUNT`.
GD_S__DIM_LIST-ORDERBY   = 1.
INSERT GD_S__DIM_LIST INTO TABLE GD_T__DIM_LIST.

CLEAR GD_S__DIM_LIST.
GD_S__DIM_LIST-DIMENSION = `TIME`.
GD_S__DIM_LIST-ORDERBY   = 2.
INSERT GD_S__DIM_LIST INTO TABLE GD_T__DIM_LIST.

CLEAR GD_S__DIM_LIST.
GD_S__DIM_LIST-DIMENSION = `ENTITY`.
GD_S__DIM_LIST-ORDERBY   = 2.
INSERT GD_S__DIM_LIST INTO TABLE GD_T__DIM_LIST.



CLEAR LD_S__ALIAS.
LD_S__ALIAS-BPC_NAME-DIMENSION  = `ACCOUNT`.
LD_S__ALIAS-BPC_ALIAS-DIMENSION = `CURRENCY`.
INSERT LD_S__ALIAS INTO TABLE LD_T__ALIAS.

CLEAR LD_S__ALIAS.
LD_S__ALIAS-BPC_NAME-DIMENSION  = `ACCOUNT`.
LD_S__ALIAS-BPC_NAME-ATTRIBUTE  = `ACCTYPE`.
LD_S__ALIAS-BPC_ALIAS-DIMENSION = `DATASOURCE`.
INSERT LD_S__ALIAS INTO TABLE LD_T__ALIAS.


*A_IC_D0_011     AST
*A_IC_D0_012     AST
*A_IC_D0_013     AST
*A_IC_D0_014     AST
*A_IC_D0_015     AST

LD_S__SEL-SIGN       = `I`.
LD_S__SEL-OPTION     = `EQ`.
LD_S__SEL-DIMENSION  = `ACCOUNT`.
LD_S__SEL-ATTRIBUTE  = `ACCTYPE`.
LD_S__SEL-LOW        = `AST`.

APPEND LD_S__SEL TO LD_T__SEL.

LD_S__SEL-SIGN       = `I`.
LD_S__SEL-OPTION     = `EQ`.
LD_S__SEL-DIMENSION  = `TIME`.
LD_S__SEL-ATTRIBUTE  = ``.
LD_S__SEL-LOW        = `2008.JAN`.

APPEND LD_S__SEL TO LD_T__SEL.

*A_MN_D0_024
*11000000

LD_S__SEL-DIMENSION  = `ACCOUNT`.
LD_S__SEL-ATTRIBUTE  = SPACE.
LD_S__SEL-LOW        = `A_MN_D0_024`.

APPEND LD_S__SEL TO LD_T__SEL.

LD_S__SEL-DIMENSION  = `ACCOUNT`.
LD_S__SEL-ATTRIBUTE  = SPACE.
LD_S__SEL-LOW        = `11000000`.

APPEND LD_S__SEL TO LD_T__SEL.




GR_O__MODEL ?= ZCL_BD00_MODEL=>GET_MODEL_CUST_APPL( I_APPSET_ID = `BUDGET_2014` IT_DIM_LIST = GD_T__DIM_LIST ).

GR_O__TABLE ?= ZCL_BD00_APPL_TABLE=>GET_APPL_CUST( I_APPSET_ID = `BUDGET_2014`
                                                   IT_KYF_LIST = GD_T__SUPPRESS_ZERO
                                                   IT_DIM_LIST = GD_T__DIM_LIST
                                                   IT_ALIAS = LD_T__ALIAS
                                                   I_PACKAGESIZE = 10
                                                   IT_RANGE = LD_T__SEL I_TYPE_PK	= ZBD0C_TY_TAB-HAS_UNIQUE_DK
).

*zbd0c_read_mode-genfull

WHILE  GR_O__TABLE->NEXT_PACK( ZBD0C_READ_MODE-GENPACK ) EQ ZBD0C_READ_PACK.
*  break-point.
ENDWHILE.

BREAK-POINT.


RETURN.
GD_S__DIM_LIST-DIMENSION = `0COMP_CODE`.
GD_S__DIM_LIST-ORDERBY   = 1.
INSERT GD_S__DIM_LIST INTO TABLE GD_T__DIM_LIST.

GD_S__DIM_LIST-DIMENSION = `0GL_ACCOUNT`.
GD_S__DIM_LIST-ORDERBY   = 2.
INSERT GD_S__DIM_LIST INTO TABLE GD_T__DIM_LIST.


GD_S__DIM_LIST-DIMENSION = `ZTAX`.
GD_S__DIM_LIST-ORDERBY   = 2.
INSERT GD_S__DIM_LIST INTO TABLE GD_T__DIM_LIST.

*append `0AMOUNT` to gd_t__suppress_zero.

GR_O__TABLE ?= ZCL_BD00_APPL_TABLE=>GET_INFOCUBE( I_INFOCUBE = `ZFISL_DT`
                                                  IT_KYF_LIST = GD_T__SUPPRESS_ZERO
                                                  IT_DIM_LIST = GD_T__DIM_LIST ).

LS_RULES_MATH-EXP = `GR_O__TABLE1 + GR_O__TABLE2`.
LS_OPERAND-VAR = `GR_O__TABLE1`.
LS_OPERAND-OBJECT = GR_O__TABLE.
LS_OPERAND-KYF = `0AMOUNT`.

INSERT LS_OPERAND INTO TABLE LS_RULES_MATH-OPERAND.

LS_OPERAND-VAR = `GR_O__TABLE2`.
LS_OPERAND-OBJECT = GR_O__TABLE.
LS_OPERAND-KYF = `ZTAX`.

INSERT LS_OPERAND INTO TABLE LS_RULES_MATH-OPERAND.

CREATE OBJECT LR_O__DEMO " целевая
  EXPORTING
    I_APPSET_ID  = `DEMO`
    I_APPL_ID    = `DEMO_01`
    I_TYPE_PK    = ZBD0C_TY_TAB-HAS_UNIQUE_DK
    IF_AUTO_SAVE = ABAP_TRUE.

DATA _01_RULE_ASSIGN TYPE ZBD0T_ID_RULES.

LS_RULES_FIELD-TG-DIMENSION = `ACCOUNT`.
LS_RULES_FIELD-SC-DIMENSION = `0GL_ACCOUNT`.
LS_RULES_FIELD-SC-OBJECT    ?= GR_O__TABLE.

INSERT LS_RULES_FIELD INTO TABLE LT_RULES_FIELD.
BREAK-POINT.
_01_RULE_ASSIGN =
LR_O__DEMO->SET_RULE_ASSIGN( IS_MATH    = LS_RULES_MATH
                             IT_FIELD   = LT_RULES_FIELD
                             I_MODE_ADD = ZBD0C_MODE_ADD_LINE-COLLECT ).


WHILE GR_O__TABLE->NEXT_PACK( ZBD0C_READ_MODE-PACK ) EQ ZBD0C_READ_PACK.
  WHILE GR_O__TABLE->NEXT_LINE( ) EQ ZBD0C_FOUND.
    LR_O__DEMO->RULE_ASSIGN( _01_RULE_ASSIGN ).
  ENDWHILE.
ENDWHILE.
